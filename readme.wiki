## li3_doctrine: The Lithium + Doctrine Integration Project

This plugin enables Lithium application developers to seamlessly implement all or part of their model layer using the [Doctrine Object-Relational Mapper](http://www.doctrine-project.org/).

To install, simply do the following (change the direction of slashes as necessary):

{{{
cd /path/to/your/app/libraries
git clone code@dev.lithify.me:li3_doctrine.git
}}}

Then, edit `app/config/bootstrap/libraries.php` and add the following:

{{{ Libraries::add('li3_doctrine'); }}}

Now you're almost ready to go. The only thing remaining is to install doctrine itself. Assuming the `li3` command is in your system path, you can do the following:

{{{
cd .. && li3 doctrine install
}}}

Finally, you must create a database connection with Doctrine. Edit `app/config/bootstrap/connections.php` and add the following:

{{{
Connections::add('default', array(
	'type' => 'doctrine',
	'driver' => 'pdo_mysql',
	'host' => 'localhost',
	'user' => 'root',
	'password' => 'password',
	'dbname' => 'blog_li3'
));
}}}


You can now use Doctrine models in your app, add standard 
doctrine entities to the model directory, example:
{{{<?php

// app/models/User.php

namespace app\models;

/**
 * @Entity 
 */
class User
{
    /**
     * @Id
     * @Column(type="integer")
     * @GeneratedValue(strategy="IDENTITY")
     */
    protected $id;

    /**
     * @Column(type="string", length="255")
     */
    protected $name;

    public function setName($name)
    {
        $this->name = $name;
    }

    public function getName()
    {
        return $this->name;
    }

}

?>}}}
 
Then this can be model can be used and accessed from your controller in the following fashion:

First be sure to include the relavant namespace and use statements
{{{namespace app\controllers;
use \app\models\User;
use \lithium\data\Connections;}}}

Then inside your action methods you can use the following

{{{$em = Connections::get('default')->getEntityManager();
$user = new User();
$user->setName('Lithium Guy');
$em->persist($user);
$em->flush();}}}
