# Work in progress


Tips on using the plugin
------------------------

Create your Entities with annotations in app\models. Extend the Entity class with \li3_doctrine\extensions\data\source\Doctrine [You can avoid this but then you will have to explicitly create the EntityManager object]. By default the plugin uses 'default' connection but you can specify any connection

{{{

// app/models/User.php

namespace app\models;
use \li3_doctrine\extensions\data\source\Doctrine;
/**
 * @Entity 
 */
class User extends Doctrine
{
    /**
     * @Id
     * @Column(type="integer")
     * @GeneratedValue(strategy="IDENTITY")
     */
    protected $id;

    /**
     * @Column(type="string", length="255")
     */
    protected $name;

    /**
     * Get id
     *
     * @return integer $id
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set name
     *
     * @param string $name
     */
    public function setName($name)
    {
        $this->name = $name;
    }

    /**
     * Get name
     *
     * @return string $name
     */
    public function getName()
    {
        return $this->name;
    }

}

}}}

{{{
namespace app\controllers;

use app\models\User;

class UserController extends \lithium\action\Controller {

	public function index() {

		$user = new User();
		$user->setName('Mr.Right');
		$user->getEntityManager()->persist($user);
		$user->getEntityManager()->flush();

	}
}
}}}

If you want to use separate connection

{{{
//using separate connection
$conn = \lithium\data\Connections::get('li3');
$doctrine = new \li3_doctrine\extensions\data\source\Doctrine($conn->_config);
$em = $doctrine->getEntityManager();

$user = new User();
$user->setName('Mr.Left');
$em->persist($user);
$em->flush();
}}}

NOTE: The Proxies are created in the cache folder with namespace app\resources\tmp\cache\Doctrine\Proxies

An example of connection

{{{
Connections::add('default', array(
	'type' => 'Doctrine',
	'driver' => 'pdo_mysql',
	'host' => 'localhost',
	'login' => 'root',
	'password' => 'root',
	'database' => 'db_name',
));
}}}

The Doctrine CLI is accessible from ./li3 doctrine

Data Retrieval and Manipulation

{{{
//Data Retrieval and Manipulation
$doctrine = new \li3_doctrine\extensions\data\source\Doctrine();
$conn = $doctrine->getConnection();

$statement = $conn->prepare('SELECT * FROM User');
$statement->execute();
$users = $statement->fetchAll();
print_r($users);
}}}