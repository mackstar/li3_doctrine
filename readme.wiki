## Work in progress
=======
#### Bootstrap

To start using li3_doctrine, you first have to import the doctrine ORM library
into your lithium application, and then the li3_doctrine plugin.

To do so, place the doctrine installation inside your `LITHIUM_LIBRARY_PATH`, 
and also the `li3_doctrine` directory. Then, add the following lines of code 
to your application's `config/bootstrap.php`:

{{{
Libraries::add('Doctrine', array(
	'path' => LITHIUM_LIBRARY_PATH . '/doctrine/DoctrineORM-2.0.0/Doctrine'
));

Libraries::add('plugin', array('li3_doctrine' => array('bootstrap' => true)));
}}}
#### Making a connection

Connecting to a Doctrine managed backend is very easy. You can do so using the
built-in Connections class provided by Lithium. Try using the following for
your application's `config/connections.php`:
{{{<?php

use \lithium\data\Connections;

Connections::add('default', 'Doctrine', array(
	'driver' => 'pdo_mysql',
	'host' => 'localhost',
	'user' => 'root',
	'password' => 'secret',
	'dbname' => 'lithium'
));

?>}}}

By default, your Doctrine proxy directory will be set to your application's
`extensions/proxies` directory and your proxy namespace will be set to
`\app\extensions\proxies`. To gain control over these configurations, you can
get an instance to the `Doctrine\ORM\Configuration` class:
{{{<?php

use \lithium\data\Connections;

Connections::add('default', 'Doctrine', array(
	'driver' => 'pdo_mysql',
	'host' => 'localhost',
	'user' => 'root',
	'password' => 'secret',
	'dbname' => 'lithium',
	'config' => function($config) {
		// $config is the Doctrine\ORM\Configuration instance that gets passed
		// to the soon-to-be created Doctrine\ORM\EntityManager.
		$config->setProxyDir('/path/to/proxies');
		$config->setProxyNamespace('\namespace\for\proxies');
		return $config;
	}
));

?>}}}

**Useful information:**

- [Read more about EntityManager](http://www.doctrine-project.org/documentation/manual/2_0/en/configuration#bootstrapping:obtaining-an-entitymanager)

Tips on using the plugin
------------------------

Create your Entities with annotations in app\models. Extend the Entity class with \li3_doctrine\extensions\data\source\Doctrine [You can avoid this but then you will have to explicitly create the EntityManager object]. By default the plugin uses 'default' connection but you can specify any connection

{{{

// app/models/User.php

namespace app\models;
use \li3_doctrine\extensions\data\source\Doctrine;
/**
 * @Entity 
 */
class User extends Doctrine
{
    /**
     * @Id
     * @Column(type="integer")
     * @GeneratedValue(strategy="IDENTITY")
     */
    protected $id;

    /**
     * @Column(type="string", length="255")
     */
    protected $name;

    /**
     * Get id
     *
     * @return integer $id
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set name
     *
     * @param string $name
     */
    public function setName($name)
    {
        $this->name = $name;
    }

    /**
     * Get name
     *
     * @return string $name
     */
    public function getName()
    {
        return $this->name;
    }

}

}}}

{{{
namespace app\controllers;

use app\models\User;

class UserController extends \lithium\action\Controller {

	public function index() {

		$user = new User();
		$user->setName('Mr.Right');
		$user->getEntityManager()->persist($user);
		$user->getEntityManager()->flush();

	}
}
}}}

If you want to use separate connection

{{{
//using separate connection
$conn = \lithium\data\Connections::get('li3');
$doctrine = new \li3_doctrine\extensions\data\source\Doctrine($conn->_config);
$em = $doctrine->getEntityManager();

$user = new User();
$user->setName('Mr.Left');
$em->persist($user);
$em->flush();
}}}

NOTE: The Proxies are created in the cache folder with namespace app\resources\tmp\cache\Doctrine\Proxies

An example of connection

{{{
Connections::add('default', array(
	'type' => 'Doctrine',
	'driver' => 'pdo_mysql',
	'host' => 'localhost',
	'login' => 'root',
	'password' => 'root',
	'database' => 'db_name',
));
}}}

The Doctrine CLI is accessible from ./li3 doctrine

Data Retrieval and Manipulation

{{{
//Data Retrieval and Manipulation
$doctrine = new \li3_doctrine\extensions\data\source\Doctrine();
$conn = $doctrine->getConnection();

$statement = $conn->prepare('SELECT * FROM User');
$statement->execute();
$users = $statement->fetchAll();
print_r($users);
}}}
